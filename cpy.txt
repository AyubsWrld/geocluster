import numpy as np
from geopy.geocoders import Nominatim
from sklearn.cluster import KMeans
import time
from typing import List, Dict
import logging
import random
from geopy.exc import GeocoderTimedOut
import folium

class DeliveryClusterer:
    def __init__(self):
        """Initialize the clusterer with Nominatim geocoder."""
        self.geolocator = Nominatim(user_agent="delivery_clusterer", timeout=10)
        logging.basicConfig(level=logging.INFO)
        self.logger = logging.getLogger(__name__)
        self.locations = []
        self.valid_addresses = []
        self.clusters = None
        self.colors = ['red', 'blue', 'green', 'purple', 'orange', 'darkred', 
                      'lightred', 'beige', 'darkblue', 'darkgreen', 'cadetblue', 
                      'darkpurple', 'pink', 'lightblue', 'lightgreen', 'gray']

    def geocode_address(self, address: str) -> tuple:
        """Convert a single address to coordinates with retries and longer timeout."""
        retries = 3
        for i in range(retries):
            try:
                time.sleep(1)  # Respect rate limiting
                location = self.geolocator.geocode(address)
                if location:
                    return (location.latitude, location.longitude)
            except GeocoderTimedOut:
                if i < retries - 1:
                    wait_time = (2 ** i) + random.uniform(0, 1)  # Exponential backoff
                    self.logger.warning(f"Timeout on {address}. Retrying in {wait_time:.2f} seconds.")
                    time.sleep(wait_time)
                else:
                    self.logger.warning(f"Failed to geocode {address} after {retries} attempts")
                    return None
            except Exception as e:
                self.logger.warning(f"Failed to geocode {address}: {str(e)}")
                return None
        return None

    def cluster_addresses(self, addresses: List[str], num_drivers: int) -> Dict[int, List[str]]:
        """
        Cluster addresses based on number of drivers
        
        Args:
            addresses: List of addresses to cluster
            num_drivers: Number of drivers (clusters) to create
            
        Returns:
            Dictionary mapping driver number to list of assigned addresses
        """
        # Convert addresses to coordinates
        print("Converting addresses to coordinates...")
        coordinates = []
        
        for addr in addresses:
            coords = self.geocode_address(addr)
            if coords:
                coordinates.append(coords)
                self.valid_addresses.append(addr)
            else:
                print(f"Warning: Could not find coordinates for {addr}")

        if len(self.valid_addresses) < num_drivers:
            raise ValueError(f"Not enough valid addresses ({len(self.valid_addresses)}) for {num_drivers} drivers")

        # Perform clustering
        print(f"\nClustering {len(self.valid_addresses)} addresses into {num_drivers} groups...")
        kmeans = KMeans(n_clusters=num_drivers, random_state=42)
        self.clusters = kmeans.fit_predict(coordinates)
        self.locations = np.array(coordinates)

        # Organize results by driver
        driver_assignments = {i: [] for i in range(num_drivers)}
        for addr, cluster_id in zip(self.valid_addresses, self.clusters):
            driver_assignments[cluster_id].append(addr)

        return driver_assignments

    def visualize_clusters(self):
        """Create interactive map with clusters and simple routes."""
        if self.clusters is None or len(self.locations) == 0:
            raise ValueError("Must cluster locations before visualizing")

        # Create map centered on mean location
        center = self.locations.mean(axis=0)
        m = folium.Map(location=center, zoom_start=12)

        # Plot points and routes for each cluster
        for cluster_id in range(max(self.clusters) + 1):
            mask = self.clusters == cluster_id
            cluster_points = self.locations[mask]
            cluster_addresses = np.array(self.valid_addresses)[mask]
            
            # Plot points
            for point, addr in zip(cluster_points, cluster_addresses):
                folium.CircleMarker(
                    location=point,
                    radius=8,
                    popup=addr,
                    color=self.colors[cluster_id],
                    fill=True
                ).add_to(m)
            
            # Draw simple straight-line routes between points
            points = cluster_points.tolist()
            if len(points) > 1:
                folium.PolyLine(
                    points,
                    color=self.colors[cluster_id],
                    weight=2,
                    opacity=0.8,
                    popup=f"Driver {cluster_id + 1} route"
                ).add_to(m)

        return m

def main():
    # Sample addresses
    addresses = [
        "15277 Castle Downs Rd NW, Edmonton, AB",   
        "11920 129 Ave NW, Edmonton, AB",          
        "15178 127 St NW, Edmonton, AB",          
        "11320 132 Ave NW, Edmonton, AB",
        "4501 30 Ave NW, Edmonton, AB", 
        "10408 124 St NW, Edmonton, AB", 
        "10363 Jasper Ave NW, Edmonton, AB", 
        "4225 118 Ave NW, Edmonton, AB", 
        "2007 138 Ave NW, Edmonton, AB",
        "10025 102A Ave NW, Edmonton, AB T5J 2Z2",
    ]
    
    # Get number of drivers from user
    while True:
        try:
            num_drivers = int(input(f"Enter number of drivers (2-{len(addresses)}): "))
            if 2 <= num_drivers <= len(addresses):
                break
            print(f"Please enter a number between 2 and {len(addresses)}")
        except ValueError:
            print("Please enter a valid number")

    # Create clusterer and process addresses
    clusterer = DeliveryClusterer()
    try:
        driver_assignments = clusterer.cluster_addresses(addresses, num_drivers)
        
        # Print results
        print("\nDelivery Assignments:")
        print("--------------------")
        for driver_id, assigned_addresses in driver_assignments.items():
            print(f"\nDriver {driver_id + 1}:")
            for addr in assigned_addresses:
                print(f"- {addr}")

        # Visualize results
        map_plot = clusterer.visualize_clusters()
        map_plot.save('clusters.html')  # Save to HTML file
        print("\nMap visualization has been saved to 'clusters.html'")

    except Exception as e:
        print(f"Error: {str(e)}")

if __name__ == "__main__":
    main()
